; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\TaintAnalysis\AntiTaint\Epilog\src\struct-align.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@	; `string'
PUBLIC	_fill
EXTRN	__imp__scanf:PROC
;	COMDAT ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
; File d:\projects\taintanalysis\antitaint\epilog\src\struct-align.c
CONST	SEGMENT
??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _fill
_TEXT	SEGMENT
_a$ = -12						; size = 4
_b$ = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_fill	PROC						; COMDAT

; 21   : {

	sub	esp, 12					; 0000000cH

; 22   :   int a, b, c;
; 23   :   scanf("%d %d %d", &a, &b, &c);

	lea	eax, DWORD PTR _c$[esp+12]
	push	eax
	lea	ecx, DWORD PTR _b$[esp+16]
	push	ecx
	lea	edx, DWORD PTR _a$[esp+20]
	push	edx
	push	OFFSET ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
	call	DWORD PTR __imp__scanf

; 24   :   s->a = a;

	mov	ecx, DWORD PTR _s$[esp+24]
	mov	eax, DWORD PTR _a$[esp+28]
	cdq
	mov	DWORD PTR [ecx], eax

; 25   :   s->b = b;

	mov	eax, DWORD PTR _b$[esp+28]
	mov	DWORD PTR [ecx+4], edx
	cdq
	mov	DWORD PTR [ecx+8], eax

; 26   :   s->c = c;

	mov	eax, DWORD PTR _c$[esp+28]
	mov	DWORD PTR [ecx+12], edx
	cdq
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx

; 27   : }

	add	esp, 28					; 0000001cH
	ret	0
_fill	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DHODEHCL@?$CFs?5?$CFd?5?$CFd?5?$CFd?6?$AA@ ; `string'
PUBLIC	_func
EXTRN	__imp__printf:PROC
EXTRN	__imp__gets:PROC
;	COMDAT ??_C@_0N@DHODEHCL@?$CFs?5?$CFd?5?$CFd?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0N@DHODEHCL@?$CFs?5?$CFd?5?$CFd?5?$CFd?6?$AA@ DB '%s %d %d %d', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _func
_TEXT	SEGMENT
_buf$ = -40						; size = 8
_s$ = -32						; size = 32
_func	PROC						; COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	and	esp, -32				; ffffffe0H
	sub	esp, 64					; 00000040H

; 31   :   struct S s;
; 32   :   char buf[8];
; 33   :   gets(buf);

	lea	eax, DWORD PTR _buf$[esp+64]
	push	eax
	call	DWORD PTR __imp__gets

; 34   :   fill(&s);

	lea	ecx, DWORD PTR _s$[esp+68]
	push	ecx
	call	_fill

; 35   :   printf("%s %d %d %d\n", buf, (int)s.a, (int)s.b, (int)s.c);

	mov	edx, DWORD PTR _s$[esp+88]
	mov	eax, DWORD PTR _s$[esp+80]
	mov	ecx, DWORD PTR _s$[esp+72]
	push	edx
	push	eax
	push	ecx
	lea	edx, DWORD PTR _buf$[esp+84]
	push	edx
	push	OFFSET ??_C@_0N@DHODEHCL@?$CFs?5?$CFd?5?$CFd?5?$CFd?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 28					; 0000001cH

; 36   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_func	ENDP
_TEXT	ENDS
PUBLIC	_main
; Function compile flags: /Ogtpy
;	COMDAT _main
_TEXT	SEGMENT
_main	PROC						; COMDAT

; 40   :   func();

	call	_func

; 41   :   return 0;

	xor	eax, eax

; 42   : }

	ret	0
_main	ENDP
_TEXT	ENDS
END
