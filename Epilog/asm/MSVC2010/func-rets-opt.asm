; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\Projects\TaintAnalysis\AntiTaint\Epilog\src\func-rets.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_func
EXTRN	__imp__printf:PROC
EXTRN	__imp__gets:PROC
; Function compile flags: /Ogtp
; File d:\projects\taintanalysis\antitaint\epilog\src\func-rets.c
;	COMDAT _func
_TEXT	SEGMENT
_buf$ = -8						; size = 8
$T3624 = 8						; size = 4
_func	PROC						; COMDAT

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 16   :   char buf[8];
; 17   :   struct S s;
; 18   :   s.a = (int)gets(buf) - (int)buf;

	lea	eax, DWORD PTR _buf$[ebp]
	push	esi
	push	eax
	call	DWORD PTR __imp__gets
	mov	esi, DWORD PTR $T3624[ebp]
	lea	ecx, DWORD PTR _buf$[ebp]

; 19   :   s.b = printf(buf);

	mov	edx, ecx
	sub	eax, ecx
	push	edx
	mov	DWORD PTR [esi], eax
	call	DWORD PTR __imp__printf

; 20   :   s.c = s.a + s.b;

	mov	ecx, DWORD PTR [esi]
	add	esp, 8
	add	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ecx

; 21   :   return s;

	mov	eax, esi
	pop	esi

; 22   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_func	ENDP
_TEXT	ENDS
PUBLIC	_main
; Function compile flags: /Ogtp
;	COMDAT _main
_TEXT	SEGMENT
$T3630 = -40						; size = 20
$T3629 = -40						; size = 20
$T3628 = -40						; size = 20
_c$ = -20						; size = 20
_b$ = -20						; size = 20
_a$ = -20						; size = 20
_main	PROC						; COMDAT

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 26   :   struct S a,b,c;
; 27   :   int z = 0;
; 28   :   a = func();

	lea	eax, DWORD PTR $T3628[ebp]
	push	edi
	push	eax
	call	_func
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp+4], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _a$[ebp+8], edx
	mov	edx, DWORD PTR [eax+16]

; 29   :   z += a.a;
; 30   :   b = func();

	lea	eax, DWORD PTR $T3629[ebp]
	push	eax
	mov	DWORD PTR _a$[ebp+12], ecx
	mov	DWORD PTR _a$[ebp+16], edx
	call	_func
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR _b$[ebp], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _b$[ebp+8], edx
	mov	edx, DWORD PTR [eax+16]

; 31   :   c = func();

	lea	eax, DWORD PTR $T3630[ebp]
	push	eax
	mov	DWORD PTR _b$[ebp+12], ecx
	mov	DWORD PTR _b$[ebp+16], edx
	call	_func
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$[ebp+4], edx
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+16]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _c$[ebp+16], eax

; 32   :   z += c.c + b.b;

	lea	eax, DWORD PTR [edi+ecx]
	pop	edi
	add	eax, esi
	mov	DWORD PTR _c$[ebp+12], edx
	pop	esi

; 33   :   return z;
; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
